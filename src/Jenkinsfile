pipeline {
    agent any
    environment {
        BROWSER_OPTIONS = 'browserType=chromium;width=1366;height=768;headless=true;slowMo=0;tracing=true;video=true'
        WEB_OPTIONS = "username=${env.USERNAME};password=${env.PASSWORD};baseUrl=${env.BASE_URL};commonEmailPart=${env.COMMON_EMAIL_PART};apiBaseUrl=${env.API_BASE_URL};adminUsername=${env.ADMIN_USERNAME};adminPassword=${env.ADMIN_PASSWORD}"
    }
    tools {
            jdk 'jdk-17'
        }
    stages {
        stage('Checkout') {
            steps {
                // Шаг клонирования репозитория
                git branch: 'main', url: 'https://github.com/YuliaMatusevich/DragonJurJenkinsRun'
            }
        }
//         stage('Install JDK') {
//                     steps {
//                         // Скачиваем и устанавливаем JDK для Windows
//                         bat 'curl -LO https://download.java.net/java/early_access/jdk17/15/GPL/openjdk-17-ea+15_windows-x64_bin.zip'
//                         bat 'Expand-Archive -Path ./openjdk-17-ea+15_windows-x64_bin.zip -DestinationPath %JDK_HOME%'
//                         bat 'setx JAVA_HOME "%JDK_HOME%"'
//                         bat 'setx PATH "%PATH%;%JDK_HOME%/bin"'
//                     }
//                 }
        stage('Build & Install') {
            steps {
                // Шаг сборки и установки проекта
                bat 'mvn -B install -D skipTests --no-transfer-progress'
            }
        }
        stage('Install Playwright') {
            steps {
                // Шаг установки Playwright
                bat 'mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"'
            }
        }
        stage('Run tests') {
            steps {
                // Шаг запуска тестов
                bat 'mvn clean test -Dsurefire'
            }
        }
//         stage('Create test report') {
//             steps {
//                 // Шаг создания отчета о тестировании
//                 // Добавьте соответствующие шаги для обработки результатов тестов
//             }
//         }
//         stage('Attach artifacts on failure') {
//             steps {
//                 // Шаг прикрепления артефактов в случае ошибки
//                 // Добавьте соответствующие шаги для обработки ошибок и прикрепления артефактов
//             }
//         }
//         stage('Get Allure history') {
//             steps {
//                 // Шаг получения истории Allure
//                 // Добавьте соответствующие шаги для получения истории Allure
//             }
//         }
//         stage('Allure Report action') {
//             steps {
//                 // Шаг создания отчета Allure
//                 // Добавьте соответствующие шаги для создания отчета Allure
//             }
//         }
//         stage('Deploy report to Github Pages') {
//             steps {
//                 // Шаг развертывания отчета на GitHub Pages
//                 // Добавьте соответствующие шаги для развертывания отчета на GitHub Pages
//             }
//         }
    }
}
